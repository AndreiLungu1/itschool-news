{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\itschool-news\\\\src\\\\pages\\\\NewsDetails.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Layout from \"../components/Layout\";\nimport { useParams } from \"react-router-dom\";\nimport { getNewsDetailsEndpoint } from \"../api/endpoints\";\nimport { useFetch } from \"../utils/hooks/useFetch\";\nimport { getNewsDetails } from \"../api/adaptors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewsDetails() {\n  _s();\n  // extrag newsId\n  let {\n    newsId\n  } = useParams();\n  //Avand in vedere ca am codificat id-ul in NewsCard.jsx, acum trebuie sa il decodific ca sa il pot trimite API\n  newsId = decodeURIComponent(newsId);\n  //Generez endpoint-ul pentru detaliile stirii\n  const newsDetailsEndpoint = getNewsDetailsEndpoint(newsId);\n  //Cerem datele stirii de la server \n  const newsDetails = useFetch(newsDetailsEndpoint);\n  //Adaptez datele de la server in functie de datele necesare componentei\n  const adaptedNewsDetails = getNewsDetails(newsDetails);\n  // Extrag cheile din adaptedNewsDetails folosind object destructuring\n  const {\n    title,\n    description,\n    image,\n    date,\n    author,\n    content,\n    thumbnail\n  } = adaptedNewsDetails;\n  // Formatez data primita de la API catre formatul: zi/luna/an\n  const formattedDate = getFormattedDate(date);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Aici sunt toate detaliile despre stirea singura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 3\n  }, this);\n}\n_s(NewsDetails, \"+VvHKXmSd5y6x5DrA4N+LTGP8W0=\", false, function () {\n  return [useParams, useFetch];\n});\n_c = NewsDetails;\nvar _c;\n$RefreshReg$(_c, \"NewsDetails\");","map":{"version":3,"names":["React","Layout","useParams","getNewsDetailsEndpoint","useFetch","getNewsDetails","jsxDEV","_jsxDEV","NewsDetails","_s","newsId","decodeURIComponent","newsDetailsEndpoint","newsDetails","adaptedNewsDetails","title","description","image","date","author","content","thumbnail","formattedDate","getFormattedDate","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/OneDrive/Desktop/itschool-news/src/pages/NewsDetails.jsx"],"sourcesContent":["import React from \"react\";\nimport Layout from \"../components/Layout\";\nimport { useParams } from \"react-router-dom\";\nimport { getNewsDetailsEndpoint } from \"../api/endpoints\";\nimport { useFetch } from \"../utils/hooks/useFetch\";\nimport { getNewsDetails } from \"../api/adaptors\";\n\nexport default function NewsDetails() {\n\t// extrag newsId\n\tlet { newsId } = useParams();\n\t//Avand in vedere ca am codificat id-ul in NewsCard.jsx, acum trebuie sa il decodific ca sa il pot trimite API\n\tnewsId = decodeURIComponent(newsId);\n\t//Generez endpoint-ul pentru detaliile stirii\n\tconst newsDetailsEndpoint = getNewsDetailsEndpoint(newsId);\n\t//Cerem datele stirii de la server \n\tconst newsDetails = useFetch(newsDetailsEndpoint);\n\t//Adaptez datele de la server in functie de datele necesare componentei\n\tconst adaptedNewsDetails = getNewsDetails(newsDetails);\n\t// Extrag cheile din adaptedNewsDetails folosind object destructuring\n\tconst {title, description, image, date, author, content, thumbnail} = adaptedNewsDetails;\n\t// Formatez data primita de la API catre formatul: zi/luna/an\n\tconst formattedDate = getFormattedDate(date);\n\treturn (\n\t\t<Layout>\n\t\t\t<p>Aici sunt toate detaliile despre stirea singura</p>\n\t\t</Layout>\n\t);\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,sBAAsB,QAAQ,kBAAkB;AACzD,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,cAAc,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrC;EACA,IAAI;IAAEC;EAAO,CAAC,GAAGR,SAAS,CAAC,CAAC;EAC5B;EACAQ,MAAM,GAAGC,kBAAkB,CAACD,MAAM,CAAC;EACnC;EACA,MAAME,mBAAmB,GAAGT,sBAAsB,CAACO,MAAM,CAAC;EAC1D;EACA,MAAMG,WAAW,GAAGT,QAAQ,CAACQ,mBAAmB,CAAC;EACjD;EACA,MAAME,kBAAkB,GAAGT,cAAc,CAACQ,WAAW,CAAC;EACtD;EACA,MAAM;IAACE,KAAK;IAAEC,WAAW;IAAEC,KAAK;IAAEC,IAAI;IAAEC,MAAM;IAAEC,OAAO;IAAEC;EAAS,CAAC,GAAGP,kBAAkB;EACxF;EACA,MAAMQ,aAAa,GAAGC,gBAAgB,CAACL,IAAI,CAAC;EAC5C,oBACCX,OAAA,CAACN,MAAM;IAAAuB,QAAA,eACNjB,OAAA;MAAAiB,QAAA,EAAG;IAA+C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEX;AAACnB,EAAA,CApBuBD,WAAW;EAAA,QAEjBN,SAAS,EAMNE,QAAQ;AAAA;AAAAyB,EAAA,GARLrB,WAAW;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}